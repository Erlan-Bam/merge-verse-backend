// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Rarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
}

enum Level {
  L0
  L1
  L2
  L3
  L4
  L5
  L6
  L7
  L8
  L9
  L10
}

model User {
  id         String   @id @default(uuid())
  telegramId String   @unique
  role       Role     @default(USER)
  balance    Float    @default(0)
  streak     Int      @default(0)
  isBanned   Boolean  @default(false)

  activeAt   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  inventory  Item[]
}

model Gift {
  id        String      @id @default(uuid())
  name      String      @unique
  rarity    Rarity
  url       String

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  inventory Item[]
}

model Item {
  id         String   @id @default(uuid())
  userId     String
  giftId     String
  level      Level
  quantity   Int
  isTradeable Boolean

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gift       Gift     @relation(fields: [giftId], references: [id], onDelete: Cascade)

  @@unique([userId, giftId, isTradeable])
  @@index([userId])
  @@index([giftId])
}

model VerticalPrice {
  id        String   @id @default(uuid())
  level     Level    @unique
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HorizontalPrice {
  id        String   @id @default(uuid())
  name      String
  rarity    Rarity
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, rarity])
}